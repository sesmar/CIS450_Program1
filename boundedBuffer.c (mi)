/* CIS 450
 *
 * boundedBuffer.c
 *
 */
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>

#define SHARED 1

//pointers to threads
void *Producer (void *);
void *Consumer (void *);

sem_t empty, full, mutex;       //global semaphores

int *data;    //pointer to buffer
int numIters, BufSize;     //iterations and buffer size


// main() -- read command line and create threads
int main(int argc, char *argv[]) {

    pthread_t pid1, pid2, pid3, cid1, cid2, cid3;

    sem_init(&empty, SHARED, 1);    // sem empty = 1
    sem_init(&full, SHARED, 0); //sem full = 0
	sem_init(&mutex, SHARED, 1); //sem mutex = 1

    if (argc < 2) {
	    printf("Usage: boundedBuffer <Number of Iterations> <Size of Bounded Buffer>\n");
	    printf(" e.g.: ./boundedBuffer 100 100\n"); 
	    exit(0);
    }


    numIters = atoi(argv[1]); //set numIters to first parameter
	BufSize = atoi(argv[2]);  //set BufSize to second parameter
	data = new int[BufSize];  //create buffer dynamically


	//create 6 threads
    pthread_create(&pid1, NULL, Producer, NULL);
    pthread_create(&cid1, NULL, Consumer, NULL);

	pthread_create(&pid2, NULL, Producer, NULL);
    pthread_create(&cid2, NULL, Consumer, NULL);

	pthread_create(&pid3, NULL, Producer, NULL);
    pthread_create(&cid3, NULL, Consumer, NULL);

	//join all threads
    pthread_join(pid1, NULL);
    pthread_join(cid1, NULL);
	pthread_join(pid2, NULL);
    pthread_join(cid2, NULL);
	pthread_join(pid3, NULL);
    pthread_join(cid3, NULL);

    pthread_exit(0);
}

// deposit 1, ..., numIters into the data buffer
void *Producer(void *arg) {
    int produced;

    for (produced = 0; produced < numIters; produced++) {
       
		sem_wait(&empty);
		sem_wait(&mutex);    //mutually exclusive start

        data[produced % BufSize] = produced;     //insert data, allow buffer to wrap
	   
		sem_post(&mutex);   //mutually exclusive end
        sem_post(&full);
    }
}

//fetch numIters items from the buffer and sum them
void *Consumer(void *arg) {
    int total = 0;
    int consumed;

    for (consumed = 0; consumed < numIters; consumed++) {

        sem_wait(&full);
		sem_wait(&mutex);    //mutually exclusive start

		total = total + data[consumed % BufSize];     //add next integer to total, allow buffer to wrap

		sem_post(&mutex);   //mutually exclusive end
        sem_post(&empty);
    }

    printf("the total is %d\n", total);
}
